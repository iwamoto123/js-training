import { knock } from "../src/knock043.js";

describe("No. 43 2次方程式の解の判別", () => {
  test("入力例1: 2つの実数解 (a=4, b=-7, c=1)", () => {
    expect(knock(4, -7, 1)).toBe("2つの実数解を持ちます");
  });

  test("入力例2: 重解 (a=1, b=2, c=1)", () => {
    expect(knock(1, 2, 1)).toBe("重解を持ちます");
  });

  test("入力例3: 2つの虚数解 (a=4, b=0, c=1)", () => {
    expect(knock(4, 0, 1)).toBe("2つの虚数解を持ちます");
  });

  test("エラーケース: aが0の場合", () => {
    expect(() => knock(0, 2, 1)).toThrow("2次方程式ではありません");
  });

  test("大きな係数の場合 (a=100, b=200, c=99)", () => {
    // D = 200^2 - 4(100)(99) = 40000 - 39600 = 400 > 0
    expect(knock(100, 200, 99)).toBe("2つの実数解を持ちます");
  });

  test("負の係数を含む場合 (a=-1, b=2, c=-1)", () => {
    // D = 2^2 - 4(-1)(-1) = 4 - 4 = 0
    expect(knock(-1, 2, -1)).toBe("重解を持ちます");
  });

  test("全ての係数が負の場合 (a=-1, b=-2, c=-1)", () => {
    // D = (-2)^2 - 4(-1)(-1) = 4 - 4 = 0
    expect(knock(-1, -2, -1)).toBe("重解を持ちます");
  });
});
